// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var assertFn, assertStr, defProtocol, dispatch, extend, hashMap, into, isFn, isJqueryElement, list, map, mutable, protocol, ref, watchRef, _ref, _ref1, _ref2;

  _ref = require('../core/protocol'), defProtocol = _ref.defProtocol, dispatch = _ref.dispatch, extend = _ref.extend;

  _ref1 = require('../core/reference'), ref = _ref1.ref, watchRef = _ref1.watchRef;

  hashMap = require('../core/hashMap').hashMap;

  list = require('./list');

  into = require('./list').into;

  map = require('../core/list').map;

  mutable = require('./mutable');

  _ref2 = require('../core/native/function'), isFn = _ref2.isFn, assertFn = _ref2.assertFn;

  assertStr = require('../core/native/string').assertStr;

  isJqueryElement = function(value) {
    return (value != null) && (value.jquery != null);
  };

  module.exports = protocol = defProtocol({
    attr: dispatch(function(element, key) {}),
    attrs: dispatch(function(element) {}),
    children: dispatch(function(element) {}),
    cosy: function(element) {
      return protocol.data(element, 'cosy');
    },
    css: dispatch(function(element, selector) {}),
    data: dispatch(function(element, key) {}),
    text: dispatch(function(element) {}),
    value: dispatch(function(element) {}),
    parents: dispatch(function(element, selector) {}),
    siblings: dispatch(function(element, selector) {}),
    matches: dispatch(function(element, selector) {}),
    listen: dispatch(function(element, event, fn) {}),
    remove: dispatch(function(element) {}),
    append: dispatch(function(element, child) {})
  });

  extend(mutable, isJqueryElement, {
    get: function(element) {
      return element.html();
    },
    set: function(element, value) {
      element.trigger('html');
      return element.html(value);
    }
  });

  extend(protocol, isJqueryElement, {
    attr: function(element, key) {
      return watchRef(mutable.set(ref(), element.attr(assertStr(key))), function(reference) {
        return element.attr(key, mutable.get(reference));
      });
    },
    attrs: function(element) {
      var attr, result, _i, _len, _ref3;
      result = {};
      if (element[0].attributes != null) {
        _ref3 = element[0].attributes;
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          attr = _ref3[_i];
          result[attr.name] = attr.value;
        }
      }
      return hashMap(result);
    },
    children: function(element) {
      return element.children();
    },
    css: function(element, selector) {
      return element.find(assertStr(selector, 'Invalid selector'));
    },
    data: function(element, key) {
      return element.data(assertStr(key));
    },
    text: function(element) {
      return watchRef(mutable.set(ref(), element.text()), function(reference) {
        return element.text(mutable.get(reference));
      });
    },
    value: function(element) {
      return watchRef(mutable.set(ref(), element.val()), function(reference) {
        element.trigger('value');
        return element.val(mutable.get(reference));
      });
    },
    parents: function(element, selector) {
      return element.parents(assertStr(selector, 'Invalid selector'));
    },
    siblings: function(element, selector) {
      return element.siblings(assertStr(selector, 'Invalid selector'));
    },
    matches: function(element, selector) {
      return element.is(assertStr(selector, 'Invalid Selector'));
    },
    listen: function(element, event, fn) {
      return element.on(event, fn);
    },
    remove: function(element) {
      element.trigger("remove");
      return element.remove();
    },
    append: function(element, child) {
      element.trigger("append");
      return element.append(child);
    }
  });

  extend(list, isJqueryElement, {
    first: function(jqList) {
      if (jqList.length) {
        return jqList.eq(0);
      } else {
        return null;
      }
    },
    rest: function(jqList) {
      if (jqList.length) {
        return jqList.slice(1);
      } else {
        return null;
      }
    }
  });

}).call(this);
