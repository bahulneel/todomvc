// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var apply, container, depreciatedMsgSent, eventFn, onEvent, onEventDepreciated, onRoleEvent, onStdEvent, query, role, roles,
    __slice = [].slice;

  apply = function(ctx, fn) {
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fn.apply(ctx, args);
    };
  };

  container = function(name, element) {
    if (element == null) {
      element = this.element;
    }
    return element.closest("[data-container=" + name + "]");
  };

  roles = function(name, element) {
    if (element == null) {
      element = this.element;
    }
    return element.find("[data-role=" + name + "]");
  };

  role = function(name, element) {
    return (roles.call(this, name, element)).eq(0);
  };

  query = function(selector) {
    return $(selector);
  };

  eventFn = function(fn) {
    return function(event) {
      return fn({
        event: event,
        element: $(event.target),
        stop: function() {
          return event.preventDefault();
        }
      });
    };
  };

  onRoleEvent = function(element, role, event, fn) {
    return element.on(event, "[data-role=" + role + "]", eventFn(fn));
  };

  onStdEvent = function(element, event, fn) {
    return element.on(event, eventFn(fn));
  };

  onEvent = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (args.length === 2) {
      return onStdEvent.apply(null, [this.element].concat(__slice.call(args)));
    } else {
      return onRoleEvent.apply(null, [this.element].concat(__slice.call(args)));
    }
  };

  depreciatedMsgSent = false;

  onEventDepreciated = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (depreciatedMsgSent === false) {
      console.log('`on` is deprecated, please use `onEvent`');
      depreciatedMsgSent = true;
    }
    return onEvent.apply(this, args);
  };

  module.exports = {
    container: container,
    role: role,
    roles: roles,
    query: query,
    onEvent: onEvent,
    "on": onEventDepreciated
  };

}).call(this);
