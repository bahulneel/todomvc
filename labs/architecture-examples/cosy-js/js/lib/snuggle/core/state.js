// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var State, addState, get, ref, removeState, set, state, watchRef, _ref, _ref1;

  _ref = require('../../core/reference'), ref = _ref.ref, watchRef = _ref.watchRef;

  _ref1 = require('../../protocol/mutable'), get = _ref1.get, set = _ref1.set;

  removeState = function(element, name) {
    element.addClass("is-not-" + name);
    element.removeClass("is-" + name);
    return element.removeAttr("data-is-" + name);
  };

  addState = function(element, name) {
    element.addClass("is-" + name);
    element.removeClass("is-not-" + name);
    return element.attr("data-is-" + name, true);
  };

  State = (function() {

    function State(element, name, def) {
      var value;
      value = ref();
      this.on = function() {
        return set(value, true);
      };
      this.off = function() {
        return set(value, false);
      };
      this.toggle = function() {
        return set(value, !(get(value)));
      };
      this.get = function() {
        return get(value);
      };
      watchRef(value, function() {
        if (get(value)) {
          return addState(element, name);
        } else {
          return removeState(element, name);
        }
      });
      set(value, def);
    }

    return State;

  })();

  state = function(name, def, element) {
    if (element == null) {
      element = this.element;
    }
    return new State(element, name, def);
  };

  module.exports = {
    state: state
  };

}).call(this);
