// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var contains, count, get, isArr, isCollection, isList, isRef, push, remove, removeItem, set, _ref;

  isArr = require('../../core/native/array').isArr;

  isCollection = require('../../core/collection').isCollection;

  isRef = require('../../core/reference').isRef;

  _ref = require('../../protocol/mutable'), get = _ref.get, set = _ref.set;

  isList = function(type) {
    return (isArr(type)) || (isCollection(type));
  };

  count = function(list) {
    if (isRef(list)) {
      return count(get(list));
    }
    if (list.length != null) {
      return list.length;
    } else {
      return 0;
    }
  };

  push = function(list, item) {
    var lst;
    if (isRef(list)) {
      lst = (get(list)) || [];
      return set(list, lst.concat([item]));
    } else {
      return list.push(item);
    }
  };

  removeItem = function(list, item) {
    var i, lst, x, _i, _len, _ref1, _results;
    if (isRef(list)) {
      lst = get(list);
      removeItem(lst, item);
      return set(list, lst);
    } else {
      _results = [];
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        x = list[i];
        _results.push(item === x ? ([].splice.apply(list, [i, i - i + 1].concat(_ref1 = [])), _ref1) : void 0);
      }
      return _results;
    }
  };

  remove = function(list, index) {
    var lst, _ref1;
    if (isRef(list)) {
      lst = get(list);
      remove(lst, index);
      return set(list, lst);
    } else {
      return ([].splice.apply(list, [index, index - index + 1].concat(_ref1 = [])), _ref1);
    }
  };

  contains = function(list, item) {
    var x, _i, _len;
    if (list == null) {
      return false;
    }
    if (isRef(list)) {
      return contains(get(list), item);
    } else {
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        x = list[_i];
        if (item === x) {
          return true;
        }
      }
    }
    return false;
  };

  module.exports = {
    count: count,
    isList: isList,
    push: push,
    remove: remove,
    removeItem: removeItem,
    contains: contains
  };

}).call(this);
