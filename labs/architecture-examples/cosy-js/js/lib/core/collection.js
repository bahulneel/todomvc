// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var Collection, collection, isArr, isCollection, isFn, map, mapItem, mutable, notify, reference, vec, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  isArr = require('./native/array').isArr;

  isFn = require('./native/function').isFn;

  mutable = require('../protocol/mutable');

  _ref = require('./list'), vec = _ref.vec, map = _ref.map;

  reference = require('./reference');

  mapItem = function(item) {
    if (reference.isRef(item)) {
      return item;
    } else {
      return reference.ref(item);
    }
  };

  notify = function(fnList, index) {
    var fn, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = fnList.length; _i < _len; _i++) {
      fn = fnList[_i];
      _results.push(typeof fn === "function" ? fn(index) : void 0);
    }
    return _results;
  };

  Collection = (function(_super) {

    __extends(Collection, _super);

    function Collection(ref) {
      var newValues;
      this.ref = ref;
      this.onUpdate = __bind(this.onUpdate, this);

      this.onRemove = __bind(this.onRemove, this);

      this.onPrepend = __bind(this.onPrepend, this);

      this.onAppend = __bind(this.onAppend, this);

      this.removeAll = __bind(this.removeAll, this);

      this.remove = __bind(this.remove, this);

      this.removeFn = __bind(this.removeFn, this);

      this.removeItem = __bind(this.removeItem, this);

      this.indexOf = __bind(this.indexOf, this);

      this.splice = __bind(this.splice, this);

      this.shift = __bind(this.shift, this);

      this.pop = __bind(this.pop, this);

      this.push = __bind(this.push, this);

      Collection.__super__.constructor.call(this);
      newValues = vec(map(mapItem, mutable.get(this.ref)));
      Array.prototype.push.apply(this, newValues);
      this.append = [];
      this.prepend = [];
      this.removed = [];
      this.update = [];
    }

    Collection.prototype.push = function(item) {
      var result;
      result = Collection.__super__.push.call(this, mapItem(item));
      notify(this.append, this.length - 1);
      reference.notifyRef(this.ref);
      return result;
    };

    Collection.prototype.pop = function() {
      var result;
      result = Collection.__super__.pop.call(this);
      if (result != null) {
        notify(this.removed, result);
        reference.notifyRef(this.ref);
        return mutable.get(result);
      }
    };

    Collection.prototype.unshift = function(item) {
      var result;
      result = Collection.__super__.unshift.call(this, mapItem(item));
      notify(this.prepend, 0);
      reference.notifyRef(this.ref);
      return result;
    };

    Collection.prototype.shift = function() {
      var result;
      result = Collection.__super__.shift.call(this);
      if (result != null) {
        notify(this.removed, result);
        reference.notifyRef(this.ref);
        return mutable.get(result);
      }
    };

    Collection.prototype.splice = function() {
      var args, item, result, _i, _j, _len, _len1, _results;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      result = Collection.__super__.splice.apply(this, args);
      if (result != null) {
        for (_i = 0, _len = result.length; _i < _len; _i++) {
          item = result[_i];
          notify(this.removed, item);
        }
        reference.notifyRef(this.ref);
        _results = [];
        for (_j = 0, _len1 = result.length; _j < _len1; _j++) {
          item = result[_j];
          _results.push(mutable.get(item));
        }
        return _results;
      }
    };

    Collection.prototype.indexOf = function(item) {
      var i, x, _i, _len;
      if (reference.isRef(item)) {
        return this.indexOf(mutable.get(item));
      }
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        x = this[i];
        if (item === mutable.get(x)) {
          return i;
        }
      }
    };

    Collection.prototype.removeItem = function(item) {
      var i, ref, _ref1;
      i = this.indexOf(item);
      if (i != null) {
        ref = this[i];
        [].splice.apply(this, [i, i - i + 1].concat(_ref1 = [])), _ref1;
        notify(this.removed, ref);
        return true;
      }
    };

    Collection.prototype.removeFn = function(fn) {
      var items, removed, x, _i, _j, _len, _len1;
      removed = false;
      items = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        x = this[_i];
        if (fn(mutable.get(x))) {
          items.push(x);
        }
      }
      for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
        x = items[_j];
        this.removeItem(x);
        removed = true;
      }
      return removed;
    };

    Collection.prototype.remove = function(arg) {
      var removed;
      if (isFn(arg)) {
        removed = this.removeFn(arg);
      } else {
        removed = this.removeItem(arg);
      }
      if (removed) {
        reference.notifyRef(this.ref);
      }
      return removed;
    };

    Collection.prototype.removeAll = function() {
      if (this.length > 0) {
        return this.remove(function() {
          return true;
        });
      } else {
        return notify(this.update);
      }
    };

    Collection.prototype.onAppend = function(fn) {
      return this.append.push(fn);
    };

    Collection.prototype.onPrepend = function(fn) {
      return this.prepend.push(fn);
    };

    Collection.prototype.onRemove = function(fn) {
      return this.removed.push(fn);
    };

    Collection.prototype.onUpdate = function(fn) {
      return this.update.push(fn);
    };

    return Collection;

  })(Array);

  collection = function(ref) {
    return new Collection(ref);
  };

  isCollection = function(type) {
    return type instanceof Collection;
  };

  module.exports = {
    collection: collection,
    isCollection: isCollection
  };

}).call(this);
