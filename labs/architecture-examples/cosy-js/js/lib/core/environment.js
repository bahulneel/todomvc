// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var Environment, assertConsole, assertDomLib, assertEnv, env, extend, getRef, isEnv, isFn, log, mutable, ref, setRef, _ref;

  isFn = require('./native/function.coffee').isFn;

  extend = require('./protocol').extend;

  mutable = require('../protocol/mutable');

  _ref = require('./reference'), ref = _ref.ref, getRef = _ref.getRef, setRef = _ref.setRef;

  Environment = (function() {

    function Environment(console, domLib) {
      this.console = assertConsole(console);
      this.domLib = assertDomLib(domLib);
      this.ref = ref();
    }

    return Environment;

  })();

  env = function(console, domLib) {
    return new Environment(console, domLib);
  };

  log = function(environment, data) {
    return (assertEnv(environment)).console.log(data);
  };

  isEnv = function(value) {
    return value instanceof Environment;
  };

  assertEnv = function(value) {
    if (!(isEnv(value))) {
      throw new Error('Invalid environment');
    }
    return value;
  };

  assertConsole = function(value) {
    if (!(isFn(value.log))) {
      throw new Error('Invalid console');
    }
    return value;
  };

  assertDomLib = function(value) {
    if ((isFn(value)) && (isFn(value.ajax)) && (isFn(value.ready))) {
      return value;
    }
    throw new Error('Invalid DOM library');
  };

  module.exports = {
    env: env,
    log: log,
    isEnv: isEnv
  };

  extend(mutable, isEnv, {
    get: function(environment) {
      return getRef(environment.ref);
    },
    set: function(environment, value) {
      setRef(environment.ref, value);
      return environment;
    }
  });

}).call(this);
