// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var HashMap, HashMapItem, extend, hashMap, hashMapItem, isEmpty, isHashMap, isHashMapItem, list, map,
    __hasProp = {}.hasOwnProperty;

  map = require('../protocol/map');

  list = require('../protocol/list');

  extend = require('./protocol').extend;

  HashMap = (function() {

    function HashMap(map) {
      var key, value;
      if (map != null) {
        for (key in map) {
          if (!__hasProp.call(map, key)) continue;
          value = map[key];
          this[key] = value;
        }
      }
    }

    return HashMap;

  })();

  HashMapItem = (function() {

    function HashMapItem() {}

    return HashMapItem;

  })();

  isEmpty = function(map) {
    var key;
    for (key in map) {
      if (!__hasProp.call(map, key)) continue;
      return false;
    }
    return true;
  };

  hashMap = function(map) {
    return new HashMap(map);
  };

  hashMapItem = function(key, value) {
    var item;
    item = new HashMapItem;
    item[0] = key;
    item[1] = value;
    return item;
  };

  isHashMap = function(map) {
    return map instanceof HashMap;
  };

  isHashMapItem = function(item) {
    return item instanceof HashMapItem;
  };

  module.exports = {
    hashMap: hashMap
  };

  extend(map, isHashMap, {
    assoc: function(col, key, value) {
      var newMap;
      newMap = hashMap(col);
      if (isHashMap(col[key])) {
        newMap[key] = list.into(col[key], value);
      } else {
        newMap[key] = value;
      }
      return newMap;
    },
    dissoc: function(col, key) {
      var newMap;
      newMap = hashMap(col);
      delete newMap[key];
      if (!isEmpty(newMap)) {
        return newMap;
      } else {
        return null;
      }
    },
    get: function(col, key, def) {
      if (def == null) {
        def = null;
      }
      if (col[key] != null) {
        return col[key];
      } else {
        return def;
      }
    },
    find: function(col, key) {
      if (col[key] != null) {
        return hashMapItem(key, col[key]);
      } else {
        return null;
      }
    }
  });

  extend(map, isHashMapItem, {
    key: function(item) {
      return item[0];
    },
    value: function(item) {
      return item[1];
    }
  });

  extend(list, isHashMap, {
    first: function(col) {
      var key, value;
      for (key in col) {
        if (!__hasProp.call(col, key)) continue;
        value = col[key];
        return hashMapItem(key, value);
      }
      return null;
    },
    rest: function(col) {
      var colFirst;
      colFirst = list.first(col);
      if (colFirst != null) {
        return map.dissoc(col, map.key(colFirst));
      } else {
        return null;
      }
    },
    conj: function(col, item) {
      var key, value, _ref;
      if (item === null) {
        return col;
      } else {
        if (isHashMapItem(item)) {
          return map.assoc(col, map.key(item), map.value(item));
        } else {
          _ref = list.first(item), key = _ref[0], value = _ref[1];
          return list.conj(map.assoc(col, key, value), list.rest(item));
        }
      }
    }
  });

}).call(this);
