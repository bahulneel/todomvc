// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var LazySeq, extend, isLazySeq, lazySeq, list;

  list = require('../protocol/list');

  extend = require('./protocol').extend;

  LazySeq = (function() {

    function LazySeq(promise, head) {
      this.promise = promise;
      this.head = (head != null ? head : head = null);
    }

    return LazySeq;

  })();

  isLazySeq = function(variable) {
    return variable instanceof LazySeq;
  };

  lazySeq = function(promise, head) {
    return new LazySeq(promise, head);
  };

  extend(list, isLazySeq, {
    first: function(sequence) {
      var seq;
      if (sequence.head == null) {
        seq = sequence.promise();
        sequence.head = list.first(seq);
        sequence.promise = function() {
          return list.rest(seq);
        };
      }
      return sequence.head;
    },
    rest: function(sequence) {
      list.first(sequence);
      return sequence.promise();
    },
    conj: function(sequence, item) {
      sequence.head = item;
      return sequence;
    }
  });

  module.exports = {
    lazySeq: lazySeq
  };

}).call(this);
