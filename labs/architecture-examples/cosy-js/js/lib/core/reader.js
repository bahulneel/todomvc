// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var Cosy, Tree, TreeNode, attrs, cosy, cosyData, css, data, dom, filter, get, getChildren, getCosy, getData, getElement, getNode, hashMap, into, isCosy, isTree, isTreeNode, key, loadNode, map, parseData, read, reduce, rest, second, value, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty;

  _ref = require('../protocol/element'), css = _ref.css, data = _ref.data, cosy = _ref.cosy, attrs = _ref.attrs;

  _ref1 = require('../protocol/map'), key = _ref1.key, value = _ref1.value;

  _ref2 = require('../protocol/list'), into = _ref2.into, second = _ref2.second, rest = _ref2.rest;

  hashMap = require('./hashMap').hashMap;

  _ref3 = require('./list'), map = _ref3.map, reduce = _ref3.reduce, filter = _ref3.filter;

  get = require('../protocol/mutable').get;

  dom = require('../dom/reader');

  getData = function(node, attr) {
    var dataName, getObject, name, parts;
    parts = /^data-(cosy-(.*))/.exec(key(attr));
    name = parts[2];
    dataName = parts[1];
    getObject = function(name, value) {
      var result;
      result = {};
      parts = /^([^-]+)(-(.*))?/.exec(name);
      if ((parts != null) && (parts[3] != null)) {
        result[parts[1]] = getObject(parts[3], value);
      } else {
        result[name] = value;
      }
      return hashMap(result);
    };
    return getObject(name, data(node, dataName));
  };

  cosyData = function(attr) {
    return (/^data-cosy-/.exec(key(attr))) != null;
  };

  parseData = function(node) {
    var result;
    result = cosy(node);
    if (result === '') {
      result = hashMap({});
    }
    if (result == null) {
      result = hashMap({});
    }
    return new Cosy(into(result, reduce(into, map((function(attr) {
      return getData(node, attr);
    }), filter(cosyData, attrs(node))))));
  };

  Tree = (function() {

    function Tree(_tree) {
      this.root = _tree.root;
      this.children = _tree.children;
    }

    return Tree;

  })();

  TreeNode = (function() {

    function TreeNode(_node) {
      this.cosy = _node.cosy;
      this.element = _node.element;
    }

    return TreeNode;

  })();

  Cosy = (function() {

    function Cosy(_cosy) {
      var _key, _value;
      for (_key in _cosy) {
        if (!__hasProp.call(_cosy, _key)) continue;
        _value = _cosy[_key];
        this[_key] = _value;
      }
    }

    return Cosy;

  })();

  isCosy = function(cosy) {
    return cosy instanceof Cosy;
  };

  isTree = function(tree) {
    return tree instanceof Tree;
  };

  isTreeNode = function(root) {
    return root instanceof TreeNode;
  };

  loadNode = function(node) {
    if (node == null) {
      return null;
    }
    return new Tree({
      root: new TreeNode({
        cosy: parseData(node.node),
        element: node.node
      }),
      children: map(loadNode, node.children)
    });
  };

  read = function(node, selector) {
    if (selector == null) {
      selector = "[data-cosy]";
    }
    return loadNode(dom.read(node, selector));
  };

  getNode = function(ast) {
    return ast.root;
  };

  getElement = function(root) {
    return root.element;
  };

  getCosy = function(root) {
    return root.cosy;
  };

  getChildren = function(ast) {
    return ast.children;
  };

  module.exports = {
    read: read,
    isTree: isTree,
    isTreeNode: isTreeNode,
    isCosy: isCosy,
    node: getNode,
    cosy: getCosy,
    children: getChildren,
    element: getElement
  };

}).call(this);
