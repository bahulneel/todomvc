// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var cons, doLoop, doSeq, drop, filter, first, lazySeq, map, recur, reduce, rest, take, vec, _ref;

  _ref = require('../protocol/list'), first = _ref.first, rest = _ref.rest, cons = _ref.cons;

  lazySeq = require('./lazySeq').lazySeq;

  map = function(fn, list) {
    if (list === null) {
      return null;
    } else {
      return cons(fn(first(list)), lazySeq(function() {
        return map(fn, rest(list));
      }));
    }
  };

  reduce = function(fn, list, accum) {
    var item;
    if (accum == null) {
      accum = null;
    }
    if (list === null) {
      return accum;
    } else {
      item = first(list);
      accum = accum != null ? fn(item, accum) : item;
      return reduce(fn, rest(list), accum);
    }
  };

  filter = function(pred, list) {
    var item;
    if (list === null) {
      return null;
    } else {
      item = first(list);
      if ((item != null) && (pred(item))) {
        return cons(item, lazySeq(function() {
          return filter(pred, rest(list));
        }));
      } else {
        return filter(pred, rest(list));
      }
    }
  };

  take = function(n, list) {
    if (list === null || n < 1) {
      return null;
    } else {
      return cons(first(list), lazySeq(function() {
        return take(n - 1, rest(list));
      }));
    }
  };

  drop = function(n, list) {
    var step;
    step = function(n, list) {
      if (n < 1) {
        return list;
      } else {
        return step(n - 1, rest(list));
      }
    };
    return lazySeq(function() {
      return step(n, list);
    });
  };

  vec = function(seq) {
    var result;
    result = [];
    doSeq((function(item) {
      return result.push(item);
    }), seq);
    return result;
  };

  doLoop = function(fn) {
    var result;
    while (fn != null) {
      result = fn();
      fn = result != null ? result.recur : void 0;
    }
    return null;
  };

  recur = function(fn) {
    return {
      recur: fn
    };
  };

  doSeq = function(fn, seq) {
    if (seq == null) {
      return null;
    }
    return doLoop(function() {
      fn(first(seq));
      return recur(function() {
        return doSeq(fn, rest(seq));
      });
    });
  };

  module.exports = {
    map: map,
    reduce: reduce,
    filter: filter,
    take: take,
    drop: drop,
    vec: vec,
    doSeq: doSeq
  };

}).call(this);
