// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var Reference, assertRef, extend, getRef, isFn, isRef, mutable, notifyRef, ref, setRef, unwatchRef, watchRef;

  extend = require('./protocol').extend;

  mutable = require('../protocol/mutable');

  isFn = require('./native/function').isFn;

  Reference = (function() {

    function Reference(value) {
      if (value == null) {
        value = null;
      }
      this.value = value;
      this.metadata = {
        watches: []
      };
    }

    return Reference;

  })();

  ref = function(value) {
    return new Reference(value);
  };

  isRef = function(value) {
    return value instanceof Reference;
  };

  assertRef = function(value) {
    if (!(isRef(value))) {
      throw new Error('Invalid reference');
    }
    return value;
  };

  getRef = function(reference) {
    return (assertRef(reference)).value;
  };

  setRef = function(reference, value) {
    (assertRef(reference)).value = value;
    notifyRef(reference);
    return reference;
  };

  watchRef = function(reference, callback) {
    (assertRef(reference)).metadata.watches.push(callback);
    return reference;
  };

  unwatchRef = function(reference, callback) {
    var fn, index, _i, _len, _ref;
    assertRef(reference);
    _ref = reference.metadata.watches;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      fn = _ref[index];
      if (fn === callback) {
        delete reference.metadata.watches[index];
      }
    }
    return true;
  };

  notifyRef = function(reference) {
    var callback, _i, _len, _ref;
    _ref = reference.metadata.watches;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      callback = _ref[_i];
      if (isFn(callback)) {
        callback(reference);
      }
    }
    return reference;
  };

  extend(mutable, isRef, {
    set: function(reference, value) {
      return setRef(reference, value);
    },
    get: function(reference) {
      return getRef(reference);
    }
  });

  module.exports = {
    ref: ref,
    isRef: isRef,
    getRef: getRef,
    setRef: setRef,
    watchRef: watchRef,
    notifyRef: notifyRef,
    unwatchRef: unwatchRef
  };

}).call(this);
